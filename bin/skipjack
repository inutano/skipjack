#!/bin/bash
set -eu

# Variables
MC_BIN_URL="https://dl.min.io/client/mc/release/linux-amd64/mc"
MC_BIN_PATH="$(which mc 2>/dev/null ||:)"
MC_DIR="${HOME}/.mc"
MC_BIN_DIR="${MC_DIR}/bin"
CONFIG_FILE="${MC_DIR}/sj_config"

WORKDIR="$( cd "$( dirname "$0" )" && pwd -P)"

# Functions
check_configuration() {
  check_config_file
  check_and_install_mc
}

check_config_file() {
  echo "Configuration file path: ${CONFIG_FILE}" 1>&2
  if [[ ! -e "${CONFIG_FILE}" ]]; then
    echo "ERROR: File not found. Creating template.." 1>&2
    create_config_file_template

    echo ">> Add connection information as follows:" 1>&2
    config_file_instruction

    exit 1
  fi
}

create_config_file_template() {
  mkdir -p ${MC_DIR}
  touch ${CONFIG_FILE}
  cat <<EOS > ${CONFIG_FILE}
ALIAS=
URL=
ACCESSKEY=
SECRETKEY=
EOS
}

check_and_install_mc() {
  if [[ -z ${MC_BIN_PATH} ]]; then
    MC_BIN_PATH="${MC_BIN_DIR}/mc"
    if [[ ! -e ${MC_BIN_PATH} ]]; then
      echo "mc command not found: installing at ${MC_BIN_DIR} .." 1>&2
      mkdir -p ${MC_BIN_DIR}
      cd ${MC_BIN_DIR}
      curl -s ${MC_BIN_URL} > ${MC_BIN_PATH}
      chmod +x ${MC_BIN_PATH}
    fi
  fi
  echo "mc command at ${MC_BIN_PATH} .." 1>&2
}

config_file_instruction() {
  echo "ALIAS=<minio_server_alias>" 1>&2
  echo "URL=<minio_server_url>" 1>&2
  echo "ACCESSKEY=<access_key>" 1>&2
  echo "SECRETKEY=<secret_key>" 1>&2
  exit 0
}

show_config_file() {
  check_configuration
  cat "${CONFIG_FILE}"
}

parse_config_file() {
  check_config_file
  MINIO_ALIAS="$(grep 'ALIAS' ${CONFIG_FILE} | cut -d '=' -f 2)"
  MINIO_URL="$(grep 'URL' ${CONFIG_FILE} | cut -d '=' -f 2)"
  MINIO_ACCESSKEY="$(grep 'ACCESSKEY' ${CONFIG_FILE} | cut -d '=' -f 2)"
  MINIO_SECRETKEY="$(grep 'SECRETKEY' ${CONFIG_FILE} | cut -d '=' -f 2)"
}

set_minio_alias() {
  parse_config_file
  no_alias=$(${MC_BIN_PATH} alias ls ${MINIO_ALIAS} 2>&1 | grep ERROR ||:)
  if [[ ! -z ${no_alias} ]]; then
    echo "Setting minio alias.." 1>&2
    ${MC_BIN_PATH} alias set ${MINIO_ALIAS} ${MINIO_URL} ${MINIO_ACCESSKEY} ${MINIO_SECRETKEY}
  fi
}

mc_copy() {
  ${MC_BIN_PATH} cp $@
}

mc_mirror() {
  ${MC_BIN_PATH} mirror $@
}

mc_ls() {
  ${MC_BIN_PATH} ls $@
}

mc_mb() {
  ${MC_BIN_PATH} mb $@
}

mc_cmd() {
  ${MC_BIN_PATH} $@
}

clean_mc_dir() {
  rm -fr ${MC_DIR}
}

version() {
  echo "skipjack: 0.1.0"
}

help() {
cat <<EOS
$(version)

Usage:
  skipjack <subcommand> [options] --bucket <server alias> <source>...

Subcommand:
  cp                      Copy files to the storage
  clean                   Clean up mc dir (default: ~/.mc)
  configure               Setup ~/.mc/config file or show configuration
  help (-h|--help)        Show this help message
  mb                      Create a bucket
  mc                      Execute mc command directly
  mirror                  Mirror files to the storage
  version (-v|--version)  Show version information
EOS
}

argument_error() {
  echo "ERROR: invalid number of arguments" 2>&1
  echo "Usage: skipjack ${subcmd} [option] --bucket <bucket> <file>..." 2>&1
  exit 1
}

main() {
  if [[ $# -eq 0 ]]; then
    help
    exit 0
  else
    local subcmd=${1}
    case ${subcmd} in
      version|--version|-v)
        version
        exit 0
        ;;
      help|--help|-h)
        help
        exit 0
        ;;
      clean)
        echo "Deleting ${MC_DIR} .."
        rm -fr ${MC_DIR}
        exit 0
        ;;
      configure)
        show_config_file
        exit 0
        ;;
      mc)
        ;;
      cp)
        ;;
      mirror)
        ;;
      ls)
        ;;
      mb)
        ;;
      *)
        echo "ERROR: invalid command ${subcmd}" 1>&2
        help
        exit 1
        ;;
    esac
    shift
  fi

  check_configuration
  set_minio_alias

  if [[ ${subcmd} == "mc" ]]; then
    mc_cmd $@
  else
    if [[ $# -lt 2 && ${subcmd} != "ls" ]]; then
      argument_error
    fi

    FILES=()
    OPTIONS=()
    while [[ $# -gt 0 ]]; do
      arg=${1}
      case ${arg} in
        --bucket|-b)
          BUCKET=${2}
          shift
          ;;
        --recursive|-r)
          OPTIONS+=("${1}")
          shift
          ;;
        *)
          FILES+=("${1}")
          ;;
      esac
      shift
    done

    set +u
    set -- "${FILES[@]}"
    case ${subcmd} in
      cp)
        if [[ $# -eq 0 ]]; then
          argument_error
        else
          mc_copy ${OPTIONS[@]} $@ ${MINIO_ALIAS}/${BUCKET}
        fi
        ;;
      mirror)
        if [[ $# -eq 0 ]]; then
          argument_error
        else
          mc_mirror ${OPTIONS[@]} $@ ${MINIO_ALIAS}/${BUCKET}
        fi
        ;;
      ls)
        mc_ls ${OPTIONS[@]} ${MINIO_ALIAS}/${BUCKET}
        ;;
      mb)
        mc_mb ${OPTIONS[@]} ${MINIO_ALIAS}/${BUCKET}
        ;;
    esac
  fi
}

# Run
main $@
